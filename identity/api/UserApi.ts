/**
 * Campaign.Core.Identity
 * Swagger document
 *
 * OpenAPI spec version: v1
 * Contact: wangzhen@jixiuapp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UserApi {
    protected basePath = 'https://openapis.ixingban.com/ids';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T, U>(first: T, second: U): T & U {
        let result = <T & U>{};
        for (let id in first) {
            (<any>result)[id] = (<any>first)[id];
        }
        for (let id in second) {
            if (!result.hasOwnProperty(id)) {
                (<any>result)[id] = (<any>second)[id];
            }
        }
        return result;
    }

    /**
     * 
     * 
     * @param id 
     */
    public userDelete(id: number, extraHttpRequestParams?: any): Observable<models.SingleResultInt64> {
        return this.userDeleteWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public userDetail(id: number, extraHttpRequestParams?: any): Observable<models.SingleResultAppUser> {
        return this.userDetailWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param skip 
     * @param take 
     */
    public userGet(skip?: number, take?: number, extraHttpRequestParams?: any): Observable<models.PagingResultAppUserModel> {
        return this.userGetWithHttpInfo(skip, take, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param parentUserID 
     * @param lineageIDs 
     * @param lineage 
     * @param avatar 
     * @param isDeleted 
     * @param roles 
     * @param claims 
     * @param logins 
     * @param tokens 
     * @param id 
     * @param userName 
     * @param normalizedUserName 
     * @param email 
     * @param normalizedEmail 
     * @param emailConfirmed 
     * @param passwordHash 
     * @param securityStamp 
     * @param concurrencyStamp 
     * @param phoneNumber 
     * @param phoneNumberConfirmed 
     * @param twoFactorEnabled 
     * @param lockoutEnd 
     * @param lockoutEnabled 
     * @param accessFailedCount 
     */
    public userPost(parentUserID?: number, lineageIDs?: string, lineage?: string, avatar?: string, isDeleted?: boolean, roles?: Array<string>, claims?: Array<string>, logins?: Array<string>, tokens?: Array<string>, id?: number, userName?: string, normalizedUserName?: string, email?: string, normalizedEmail?: string, emailConfirmed?: boolean, passwordHash?: string, securityStamp?: string, concurrencyStamp?: string, phoneNumber?: string, phoneNumberConfirmed?: boolean, twoFactorEnabled?: boolean, lockoutEnd?: Date, lockoutEnabled?: boolean, accessFailedCount?: number, extraHttpRequestParams?: any): Observable<models.SingleResultInt64> {
        return this.userPostWithHttpInfo(parentUserID, lineageIDs, lineage, avatar, isDeleted, roles, claims, logins, tokens, id, userName, normalizedUserName, email, normalizedEmail, emailConfirmed, passwordHash, securityStamp, concurrencyStamp, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEnd, lockoutEnabled, accessFailedCount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param parentUserID 
     * @param lineageIDs 
     * @param lineage 
     * @param avatar 
     * @param isDeleted 
     * @param roles 
     * @param claims 
     * @param logins 
     * @param tokens 
     * @param id 
     * @param userName 
     * @param normalizedUserName 
     * @param email 
     * @param normalizedEmail 
     * @param emailConfirmed 
     * @param passwordHash 
     * @param securityStamp 
     * @param concurrencyStamp 
     * @param phoneNumber 
     * @param phoneNumberConfirmed 
     * @param twoFactorEnabled 
     * @param lockoutEnd 
     * @param lockoutEnabled 
     * @param accessFailedCount 
     */
    public userPut(parentUserID?: number, lineageIDs?: string, lineage?: string, avatar?: string, isDeleted?: boolean, roles?: Array<string>, claims?: Array<string>, logins?: Array<string>, tokens?: Array<string>, id?: number, userName?: string, normalizedUserName?: string, email?: string, normalizedEmail?: string, emailConfirmed?: boolean, passwordHash?: string, securityStamp?: string, concurrencyStamp?: string, phoneNumber?: string, phoneNumberConfirmed?: boolean, twoFactorEnabled?: boolean, lockoutEnd?: Date, lockoutEnabled?: boolean, accessFailedCount?: number, extraHttpRequestParams?: any): Observable<models.SingleResultInt64> {
        return this.userPutWithHttpInfo(parentUserID, lineageIDs, lineage, avatar, isDeleted, roles, claims, logins, tokens, id, userName, normalizedUserName, email, normalizedEmail, emailConfirmed, passwordHash, securityStamp, concurrencyStamp, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEnd, lockoutEnabled, accessFailedCount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param id 
     */
    public userDeleteWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/User/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public userDetailWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/User/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userDetail.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param skip 
     * @param take 
     */
    public userGetWithHttpInfo(skip?: number, take?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/User`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (skip !== undefined) {
            queryParameters.set('skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters.set('take', <any>take);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param parentUserID 
     * @param lineageIDs 
     * @param lineage 
     * @param avatar 
     * @param isDeleted 
     * @param roles 
     * @param claims 
     * @param logins 
     * @param tokens 
     * @param id 
     * @param userName 
     * @param normalizedUserName 
     * @param email 
     * @param normalizedEmail 
     * @param emailConfirmed 
     * @param passwordHash 
     * @param securityStamp 
     * @param concurrencyStamp 
     * @param phoneNumber 
     * @param phoneNumberConfirmed 
     * @param twoFactorEnabled 
     * @param lockoutEnd 
     * @param lockoutEnabled 
     * @param accessFailedCount 
     */
    public userPostWithHttpInfo(parentUserID?: number, lineageIDs?: string, lineage?: string, avatar?: string, isDeleted?: boolean, roles?: Array<string>, claims?: Array<string>, logins?: Array<string>, tokens?: Array<string>, id?: number, userName?: string, normalizedUserName?: string, email?: string, normalizedEmail?: string, emailConfirmed?: boolean, passwordHash?: string, securityStamp?: string, concurrencyStamp?: string, phoneNumber?: string, phoneNumberConfirmed?: boolean, twoFactorEnabled?: boolean, lockoutEnd?: Date, lockoutEnabled?: boolean, accessFailedCount?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/User`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (parentUserID !== undefined) {
            queryParameters.set('ParentUserID', <any>parentUserID);
        }
        if (lineageIDs !== undefined) {
            queryParameters.set('LineageIDs', <any>lineageIDs);
        }
        if (lineage !== undefined) {
            queryParameters.set('Lineage', <any>lineage);
        }
        if (avatar !== undefined) {
            queryParameters.set('Avatar', <any>avatar);
        }
        if (isDeleted !== undefined) {
            queryParameters.set('IsDeleted', <any>isDeleted);
        }
        if (roles !== undefined) {
            queryParameters.set('Roles', <any>roles);
        }
        if (claims !== undefined) {
            queryParameters.set('Claims', <any>claims);
        }
        if (logins !== undefined) {
            queryParameters.set('Logins', <any>logins);
        }
        if (tokens !== undefined) {
            queryParameters.set('Tokens', <any>tokens);
        }
        if (id !== undefined) {
            queryParameters.set('Id', <any>id);
        }
        if (userName !== undefined) {
            queryParameters.set('UserName', <any>userName);
        }
        if (normalizedUserName !== undefined) {
            queryParameters.set('NormalizedUserName', <any>normalizedUserName);
        }
        if (email !== undefined) {
            queryParameters.set('Email', <any>email);
        }
        if (normalizedEmail !== undefined) {
            queryParameters.set('NormalizedEmail', <any>normalizedEmail);
        }
        if (emailConfirmed !== undefined) {
            queryParameters.set('EmailConfirmed', <any>emailConfirmed);
        }
        if (passwordHash !== undefined) {
            queryParameters.set('PasswordHash', <any>passwordHash);
        }
        if (securityStamp !== undefined) {
            queryParameters.set('SecurityStamp', <any>securityStamp);
        }
        if (concurrencyStamp !== undefined) {
            queryParameters.set('ConcurrencyStamp', <any>concurrencyStamp);
        }
        if (phoneNumber !== undefined) {
            queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (phoneNumberConfirmed !== undefined) {
            queryParameters.set('PhoneNumberConfirmed', <any>phoneNumberConfirmed);
        }
        if (twoFactorEnabled !== undefined) {
            queryParameters.set('TwoFactorEnabled', <any>twoFactorEnabled);
        }
        if (lockoutEnd !== undefined) {
            queryParameters.set('LockoutEnd', <any>lockoutEnd);
        }
        if (lockoutEnabled !== undefined) {
            queryParameters.set('LockoutEnabled', <any>lockoutEnabled);
        }
        if (accessFailedCount !== undefined) {
            queryParameters.set('AccessFailedCount', <any>accessFailedCount);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param parentUserID 
     * @param lineageIDs 
     * @param lineage 
     * @param avatar 
     * @param isDeleted 
     * @param roles 
     * @param claims 
     * @param logins 
     * @param tokens 
     * @param id 
     * @param userName 
     * @param normalizedUserName 
     * @param email 
     * @param normalizedEmail 
     * @param emailConfirmed 
     * @param passwordHash 
     * @param securityStamp 
     * @param concurrencyStamp 
     * @param phoneNumber 
     * @param phoneNumberConfirmed 
     * @param twoFactorEnabled 
     * @param lockoutEnd 
     * @param lockoutEnabled 
     * @param accessFailedCount 
     */
    public userPutWithHttpInfo(parentUserID?: number, lineageIDs?: string, lineage?: string, avatar?: string, isDeleted?: boolean, roles?: Array<string>, claims?: Array<string>, logins?: Array<string>, tokens?: Array<string>, id?: number, userName?: string, normalizedUserName?: string, email?: string, normalizedEmail?: string, emailConfirmed?: boolean, passwordHash?: string, securityStamp?: string, concurrencyStamp?: string, phoneNumber?: string, phoneNumberConfirmed?: boolean, twoFactorEnabled?: boolean, lockoutEnd?: Date, lockoutEnabled?: boolean, accessFailedCount?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/User`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (parentUserID !== undefined) {
            queryParameters.set('ParentUserID', <any>parentUserID);
        }
        if (lineageIDs !== undefined) {
            queryParameters.set('LineageIDs', <any>lineageIDs);
        }
        if (lineage !== undefined) {
            queryParameters.set('Lineage', <any>lineage);
        }
        if (avatar !== undefined) {
            queryParameters.set('Avatar', <any>avatar);
        }
        if (isDeleted !== undefined) {
            queryParameters.set('IsDeleted', <any>isDeleted);
        }
        if (roles !== undefined) {
            queryParameters.set('Roles', <any>roles);
        }
        if (claims !== undefined) {
            queryParameters.set('Claims', <any>claims);
        }
        if (logins !== undefined) {
            queryParameters.set('Logins', <any>logins);
        }
        if (tokens !== undefined) {
            queryParameters.set('Tokens', <any>tokens);
        }
        if (id !== undefined) {
            queryParameters.set('Id', <any>id);
        }
        if (userName !== undefined) {
            queryParameters.set('UserName', <any>userName);
        }
        if (normalizedUserName !== undefined) {
            queryParameters.set('NormalizedUserName', <any>normalizedUserName);
        }
        if (email !== undefined) {
            queryParameters.set('Email', <any>email);
        }
        if (normalizedEmail !== undefined) {
            queryParameters.set('NormalizedEmail', <any>normalizedEmail);
        }
        if (emailConfirmed !== undefined) {
            queryParameters.set('EmailConfirmed', <any>emailConfirmed);
        }
        if (passwordHash !== undefined) {
            queryParameters.set('PasswordHash', <any>passwordHash);
        }
        if (securityStamp !== undefined) {
            queryParameters.set('SecurityStamp', <any>securityStamp);
        }
        if (concurrencyStamp !== undefined) {
            queryParameters.set('ConcurrencyStamp', <any>concurrencyStamp);
        }
        if (phoneNumber !== undefined) {
            queryParameters.set('PhoneNumber', <any>phoneNumber);
        }
        if (phoneNumberConfirmed !== undefined) {
            queryParameters.set('PhoneNumberConfirmed', <any>phoneNumberConfirmed);
        }
        if (twoFactorEnabled !== undefined) {
            queryParameters.set('TwoFactorEnabled', <any>twoFactorEnabled);
        }
        if (lockoutEnd !== undefined) {
            queryParameters.set('LockoutEnd', <any>lockoutEnd);
        }
        if (lockoutEnabled !== undefined) {
            queryParameters.set('LockoutEnabled', <any>lockoutEnabled);
        }
        if (accessFailedCount !== undefined) {
            queryParameters.set('AccessFailedCount', <any>accessFailedCount);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
