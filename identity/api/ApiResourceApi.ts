/**
 * Campaign.Core.Identity
 * Swagger document
 *
 * OpenAPI spec version: v1
 * Contact: wangzhen@jixiuapp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ApiResourceApi {
    protected basePath = 'https://openapis.ixingban.com/ids';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T, U>(first: T, second: U): T & U {
        let result = <T & U>{};
        for (let id in first) {
            (<any>result)[id] = (<any>first)[id];
        }
        for (let id in second) {
            if (!result.hasOwnProperty(id)) {
                (<any>result)[id] = (<any>second)[id];
            }
        }
        return result;
    }
    /**
     * 
     * 
     * @param id 
     */
    public apiResourceDelete(id: number, extraHttpRequestParams?: any): Observable<models.SingleResultInt32> {
        return this.apiResourceDeleteWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     */
    public apiResourceDetail(id: number, extraHttpRequestParams?: any): Observable<models.SingleResultApiResource> {
        return this.apiResourceDetailWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param skip 
     * @param take 
     */
    public apiResourceGet(skip?: number, take?: number, extraHttpRequestParams?: any): Observable<models.PagingResultApiResource> {
        return this.apiResourceGetWithHttpInfo(skip, take, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param enabled 
     * @param name 
     * @param displayName 
     * @param description 
     * @param secrets 
     * @param scopes 
     * @param userClaims 
     */
    public apiResourcePost(id?: number, enabled?: boolean, name?: string, displayName?: string, description?: string, secrets?: Array<string>, scopes?: Array<string>, userClaims?: Array<string>, extraHttpRequestParams?: any): Observable<models.SingleResultInt32> {
        return this.apiResourcePostWithHttpInfo(id, enabled, name, displayName, description, secrets, scopes, userClaims, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param id 
     * @param enabled 
     * @param name 
     * @param displayName 
     * @param description 
     * @param secrets 
     * @param scopes 
     * @param userClaims 
     */
    public apiResourcePut(id?: number, enabled?: boolean, name?: string, displayName?: string, description?: string, secrets?: Array<string>, scopes?: Array<string>, userClaims?: Array<string>, extraHttpRequestParams?: any): Observable<models.SingleResultInt32> {
        return this.apiResourcePutWithHttpInfo(id, enabled, name, displayName, description, secrets, scopes, userClaims, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param id 
     */
    public apiResourceDeleteWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ApiResource/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiResourceDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     */
    public apiResourceDetailWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ApiResource/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiResourceDetail.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param skip 
     * @param take 
     */
    public apiResourceGetWithHttpInfo(skip?: number, take?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ApiResource`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (skip !== undefined) {
            queryParameters.set('skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters.set('take', <any>take);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param enabled 
     * @param name 
     * @param displayName 
     * @param description 
     * @param secrets 
     * @param scopes 
     * @param userClaims 
     */
    public apiResourcePostWithHttpInfo(id?: number, enabled?: boolean, name?: string, displayName?: string, description?: string, secrets?: Array<string>, scopes?: Array<string>, userClaims?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ApiResource`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (id !== undefined) {
            queryParameters.set('Id', <any>id);
        }
        if (enabled !== undefined) {
            queryParameters.set('Enabled', <any>enabled);
        }
        if (name !== undefined) {
            queryParameters.set('Name', <any>name);
        }
        if (displayName !== undefined) {
            queryParameters.set('DisplayName', <any>displayName);
        }
        if (description !== undefined) {
            queryParameters.set('Description', <any>description);
        }
        if (secrets !== undefined) {
            queryParameters.set('Secrets', <any>secrets);
        }
        if (scopes !== undefined) {
            queryParameters.set('Scopes', <any>scopes);
        }
        if (userClaims !== undefined) {
            queryParameters.set('UserClaims', <any>userClaims);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param id 
     * @param enabled 
     * @param name 
     * @param displayName 
     * @param description 
     * @param secrets 
     * @param scopes 
     * @param userClaims 
     */
    public apiResourcePutWithHttpInfo(id?: number, enabled?: boolean, name?: string, displayName?: string, description?: string, secrets?: Array<string>, scopes?: Array<string>, userClaims?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ApiResource`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (id !== undefined) {
            queryParameters.set('Id', <any>id);
        }
        if (enabled !== undefined) {
            queryParameters.set('Enabled', <any>enabled);
        }
        if (name !== undefined) {
            queryParameters.set('Name', <any>name);
        }
        if (displayName !== undefined) {
            queryParameters.set('DisplayName', <any>displayName);
        }
        if (description !== undefined) {
            queryParameters.set('Description', <any>description);
        }
        if (secrets !== undefined) {
            queryParameters.set('Secrets', <any>secrets);
        }
        if (scopes !== undefined) {
            queryParameters.set('Scopes', <any>scopes);
        }
        if (userClaims !== undefined) {
            queryParameters.set('UserClaims', <any>userClaims);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
