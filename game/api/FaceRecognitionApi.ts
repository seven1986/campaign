/**
 * campaign.game
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2-preview-2.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class FaceRecognitionApi {
    protected basePath = 'https://openapis.ixingban.com/game';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	

	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T, U>(first: T, second: U): T & U {
        let result = <T & U>{};
        for (let id in first) {
            (<any>result)[id] = (<any>first)[id];
        }
        for (let id in second) {
            if (!result.hasOwnProperty(id)) {
                (<any>result)[id] = (<any>second)[id];
            }
        }
        return result;
    }


    /**
     * Comment according to comparisonId
     * 
     * @param comment 
     */
    public apiFaceRecognitionComment(comment?: models.CommentModel, extraHttpRequestParams?: any): Observable<models.BoolResult> {
        return this.apiFaceRecognitionCommentWithHttpInfo(comment, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a list of comments according to comparisonId
     * 
     * @param comparisonId unique comparison ID
     * @param take 
     * @param skip 
     */
    public apiFaceRecognitionComments(comparisonId?: string, take?: number, skip?: number, extraHttpRequestParams?: any): Observable<models.PagingResultCommentModel> {
        return this.apiFaceRecognitionCommentsWithHttpInfo(comparisonId, take, skip, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Details of face comparison
     * 
     * @param comparisonId unique comparison ID
     */
    public apiFaceRecognitionComparison(comparisonId?: string, extraHttpRequestParams?: any): Observable<models.FaceComparison> {
        return this.apiFaceRecognitionComparisonWithHttpInfo(comparisonId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a list of face comparisons
     * 
     * @param take 
     * @param skip 
     */
    public apiFaceRecognitionComparisonList(take?: number, skip?: number, extraHttpRequestParams?: any): Observable<models.PagingResultFaceComparison> {
        return this.apiFaceRecognitionComparisonListWithHttpInfo(take, skip, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Submit a face comparison
     * 
     * @param userId 用户的AppUserId
     * @param openId 微信的用户OpenID
     * @param nickName 微信的用户昵称
     * @param headerImgUrl 微信的用户头像
     * @param country 微信的用户国家
     * @param comparisonId 
     * @param confidence 相似度
     * @param commentCount 点评数
     * @param ranking 
     * @param img1Url 
     * @param img2Url 
     * @param errcode 
     * @param errmsg 
     */
    public apiFaceRecognitionFaceComparison(userId?: string, openId?: string, nickName?: string, headerImgUrl?: string, country?: string, comparisonId?: string, confidence?: number, commentCount?: number, ranking?: number, img1Url?: string, img2Url?: string, errcode?: number, errmsg?: string, extraHttpRequestParams?: any): Observable<models.FaceComparison> {
        return this.apiFaceRecognitionFaceComparisonWithHttpInfo(userId, openId, nickName, headerImgUrl, country, comparisonId, confidence, commentCount, ranking, img1Url, img2Url, errcode, errmsg, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Comment according to comparisonId
     * 
     * @param comment 
     */
    public apiFaceRecognitionCommentWithHttpInfo(comment?: models.CommentModel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/FaceRecognition/Comment`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
        // authentication (apiKeyHeader) required
        if (this.configuration.apiKey)
        {
            headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKey);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: comment == null ? '' : JSON.stringify(comment), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of comments according to comparisonId
     * 
     * @param comparisonId unique comparison ID
     * @param take 
     * @param skip 
     */
    public apiFaceRecognitionCommentsWithHttpInfo(comparisonId?: string, take?: number, skip?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/FaceRecognition/Comments`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (comparisonId !== undefined) {
            queryParameters.set('comparisonId', <any>comparisonId);
        }
        if (take !== undefined) {
            queryParameters.set('take', <any>take);
        }
        if (skip !== undefined) {
            queryParameters.set('skip', <any>skip);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
        // authentication (apiKeyHeader) required
        if (this.configuration.apiKey)
        {
            headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Details of face comparison
     * 
     * @param comparisonId unique comparison ID
     */
    public apiFaceRecognitionComparisonWithHttpInfo(comparisonId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/FaceRecognition/Comparison`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (comparisonId !== undefined) {
            queryParameters.set('comparisonId', <any>comparisonId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
        // authentication (apiKeyHeader) required
        if (this.configuration.apiKey)
        {
            headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a list of face comparisons
     * 
     * @param take 
     * @param skip 
     */
    public apiFaceRecognitionComparisonListWithHttpInfo(take?: number, skip?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/FaceRecognition/ComparisonList`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (take !== undefined) {
            queryParameters.set('take', <any>take);
        }
        if (skip !== undefined) {
            queryParameters.set('skip', <any>skip);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
        // authentication (apiKeyHeader) required
        if (this.configuration.apiKey)
        {
            headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Submit a face comparison
     * 
     * @param userId 用户的AppUserId
     * @param openId 微信的用户OpenID
     * @param nickName 微信的用户昵称
     * @param headerImgUrl 微信的用户头像
     * @param country 微信的用户国家
     * @param comparisonId 
     * @param confidence 相似度
     * @param commentCount 点评数
     * @param ranking 
     * @param img1Url 
     * @param img2Url 
     * @param errcode 
     * @param errmsg 
     */
    public apiFaceRecognitionFaceComparisonWithHttpInfo(userId?: string, openId?: string, nickName?: string, headerImgUrl?: string, country?: string, comparisonId?: string, confidence?: number, commentCount?: number, ranking?: number, img1Url?: string, img2Url?: string, errcode?: number, errmsg?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/FaceRecognition/FaceComparison`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (userId !== undefined) {
            queryParameters.set('userId', <any>userId);
        }
        if (openId !== undefined) {
            queryParameters.set('openId', <any>openId);
        }
        if (nickName !== undefined) {
            queryParameters.set('nickName', <any>nickName);
        }
        if (headerImgUrl !== undefined) {
            queryParameters.set('headerImgUrl', <any>headerImgUrl);
        }
        if (country !== undefined) {
            queryParameters.set('country', <any>country);
        }
        if (comparisonId !== undefined) {
            queryParameters.set('comparisonId', <any>comparisonId);
        }
        if (confidence !== undefined) {
            queryParameters.set('confidence', <any>confidence);
        }
        if (commentCount !== undefined) {
            queryParameters.set('commentCount', <any>commentCount);
        }
        if (ranking !== undefined) {
            queryParameters.set('ranking', <any>ranking);
        }
        if (img1Url !== undefined) {
            queryParameters.set('img1Url', <any>img1Url);
        }
        if (img2Url !== undefined) {
            queryParameters.set('img2Url', <any>img2Url);
        }
        if (errcode !== undefined) {
            queryParameters.set('errcode', <any>errcode);
        }
        if (errmsg !== undefined) {
            queryParameters.set('errmsg', <any>errmsg);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];
        
        // authentication (apiKeyHeader) required
        if (this.configuration.apiKey)
        {
            headers.set('Ocp-Apim-Subscription-Key', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
